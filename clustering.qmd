---
title: "Clustering"
author: "Ángel García, Arnau Piferrer y Guillem Serra"
format: html
editor: visual
---

Este es el [repositorio](https://github.com/GSMir/Entrega3) de GitHub en el que alojaremos todos los archivos relacionados con esta entrega. Para consultar la fuente de la que se ha extraído nuestro Dataset consulta el siguiente [link](https://archive.ics.uci.edu/dataset/45/heart+disease). Nuestro Dataset ha sido publicado por la Universidad de California de Irvine.

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
```

```{r, message = FALSE,warning=FALSE}
library(readr)
library(tidyverse)
library(dplyr)
library(patchwork)
library(MVA)
library(corrplot)
library(graphics)
library(GGally)
library("aplpack")
library(ggplot2)
library(factoextra)
library(cluster)
library(dendextend)
library(clValid)
library(plotly)
```

```{r}
heartdisease = read_csv("https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data", col_names = FALSE, show_col_types = FALSE)
heartdisease <- heartdisease %>% 
  filter(!str_detect(X13, "\\?") & (!str_detect(X12, "\\?")))

heartdisease <- heartdisease %>%
  mutate(sex = as.factor(heartdisease$X2), .after = X2) %>%
  mutate(cp = as.factor(heartdisease$X3), .after = X3) %>%
  mutate(fbs = as.factor(heartdisease$X6), .after = X6) %>%
  mutate(restecg = as.factor(heartdisease$X7), .after = X7) %>%
  mutate(exang = as.factor(heartdisease$X9), .after = X9) %>%
  mutate(slope = as.factor(heartdisease$X11), .after = X11) %>%
  mutate(mves = as.numeric(heartdisease$X12), .after = X12) %>%
  mutate(
    tHR2 = case_when(
      X13 == "3.0" ~ "3",
      X13 == "6.0" ~ "6",
      X13 == "7.0" ~ "7"),
    .keep = "all", .after = X13) %>%
  mutate(
    fdiag2 = case_when(
      X14 == "0" ~ "0",
      X14 == "1" ~ "1",
      X14 == "2" ~ "1",
      X14 == "3" ~ "1",
      X14 == "4" ~ "1"),
    .keep = "all", .after = X14)

heartdisease <- heartdisease %>%
  mutate(tHR = as.factor(heartdisease$tHR2), .after = tHR2) %>%
  mutate(fdiag = as.factor(heartdisease$fdiag2), .after = fdiag2) %>%
  rename(age = X1, restbp = X4, chol = X5, maxHR = X8, expeak = X10)
heartdisease <- heartdisease %>%
  select(age, sex, cp, restbp, chol, fbs, restecg, maxHR, exang, expeak, slope, tHR, fdiag)

heartdisease_numeric <- heartdisease %>%
  select(where(is.numeric))


heartdisease_categoric <- heartdisease %>%
  select(where(is.factor))
```

#Partitioning Clustering 

##K-means

```{r}
mat_dist <- dist(x = heartdisease_numeric, method = "euclidean")
```

```{r}
#mat_dist <- get_dist(x = heartdisease_numeric, method = "pearson")
```

```{r}
datos_temp <- as_tibble(heartdisease_numeric)
datos_temp <- datos_temp %>% filter(chol != max(chol))
datos <- scale(datos_temp)
```

```{r}
fviz_nbclust(x = datos, FUNcluster = kmeans, method = "wss",
            diss = dist(datos, method = "euclidean")) +
            geom_vline(xintercept = 2, linetype = 2) +labs(title = "Elbow method")
```

```{r}
fviz_nbclust(x = datos, FUNcluster = kmeans, method = "silhouette") +
 labs(title = "Silhouette method")
```

```{r, warning=FALSE}
fviz_nbclust(x = datos, FUNcluster = kmeans, method = "gap_stat", nboot = 50,
 verbose = FALSE, nstart = 25) +
 labs(title = "Gap Stat method")
```

```{r}
km_clusters <- kmeans(x = datos, centers = 2, nstart = 25)
fviz_cluster(object = km_clusters, data = datos, show.clust.cent = TRUE,
 ellipse.type = "euclid", star.plot = TRUE, repel = TRUE) +
theme_bw() +
theme(legend.position = "right")
```

Seleccionem un subconjunt aleatori i tornem a fer el clustering \`

```{r}
set.seed(420)
datos<-as.data.frame(datos_temp)
datos_temp1 <- sample_n(datos, 100)
datos_1 <- scale(datos_temp1)
datos_2<-as_tibble(datos_1)

fviz_nbclust(x = datos_2, FUNcluster = kmeans, method = "wss",
            diss = dist(datos, method = "euclidean")) +
            geom_vline(xintercept = 2, linetype = 2) +labs(title = "Elbow method")
```

```{r}
fviz_nbclust(x = datos_2, FUNcluster = kmeans, method = "silhouette") +
 labs(title = "Silhouette method")
```

```{r}
km_clusters <- kmeans(x = datos_2, centers = 2, nstart = 25)
fviz_cluster(object = km_clusters, data = datos_2, show.clust.cent = TRUE,
 ellipse.type = "euclid", star.plot = TRUE, repel = TRUE) +
theme_bw() +
theme(legend.position = "right")
```

#K−medoids

```{r}
dist_manhattan <- get_dist(x = datos_2, method = "manhattan")
fviz_dist(dist.obj = dist_manhattan, lab_size = 5) +
 theme(legend.position = "right")
```

```{r}
fviz_nbclust(x = datos_2, FUNcluster = pam, method = "wss",
 diss = dist(datos, method = "manhattan")) +
    geom_vline(xintercept = 2, linetype = 2) +labs(title = "Elbow method")
```

```{r}
fviz_nbclust(x = datos_2, FUNcluster = pam, method = "silhouette") +
 labs(title = "Silhouette method")
```

```{r,warning=FALSE}
fviz_nbclust(x = datos_2, FUNcluster = pam, method = "gap_stat", nboot = 50,
 verbose = FALSE, nstart = 25) +
 labs(title = "Gap Stat method")
```

```{r}
pam_clusters <- pam(x = datos_2, k = 2, metric = "manhattan")

fviz_cluster(object = pam_clusters, data = datos_2, ellipse.type = "t",
            repel = TRUE) +
 theme_bw() +
 theme(legend.position = "right")
```

#Hierarchical Clustering

```{r}
mat_dist <- dist(x = datos_2, method = "euclidean")
fviz_dist(dist.obj = mat_dist, lab_size = 5) +
 theme(legend.position = "right")
```

##Complete

```{r, warning = FALSE}
hc_complete <- hclust(d = mat_dist, method = "complete")

fviz_dend(x = hc_complete, k = 2, cex = 0.5, show_labels = FALSE) +
  geom_hline(yintercept = 2.795, linetype = "dashed")
```

```{r}
fviz_cluster(object = list(data = datos_2, cluster = cutree(hc_complete, k = 2)),
 ellipse.type = "convex",
 repel = TRUE,
 show.clust.cent = TRUE) +
theme_bw()
```

##Single

```{r, warning = FALSE}
hc_single <- hclust(d = mat_dist, method = "single")

fviz_dend(x = hc_single, k = 2, cex = 0.6,show_labels=FALSE) +
  geom_hline(yintercept = 1, linetype = "dashed")
```

```{r}
fviz_cluster(object = list(data = datos_2, cluster = cutree(hc_single, k = 2)),
 ellipse.type = "convex",
 repel = TRUE,
 show.clust.cent = TRUE) +
theme_bw()
```

##Avarage

```{r, warning=FALSE}
hc_average <- hclust(d = mat_dist, method = "average")

fviz_dend(x = hc_average, k = 2, cex = 0.6, show_labels = FALSE) +
  geom_hline(yintercept = 2.25, linetype = "dashed")
```

```{r}
fviz_cluster(object = list(data = datos_2, cluster = cutree(hc_average, k = 2)),
 ellipse.type = "convex",
 repel = TRUE,
 show.clust.cent = TRUE) +
theme_bw()
```



##Centroid

```{r,warning=FALSE}
hc_centroid <- hclust(d=mat_dist,method="centroid")

fviz_dend(x = hc_centroid, k = 2, cex = 0.6,show_labels = FALSE)
```

```{r}
fviz_cluster(object = list(data = datos_2, cluster = cutree(hc_centroid, k = 2)),
 ellipse.type = "convex",
 repel = TRUE,
 show.clust.cent = TRUE) +
theme_bw()
```

##Ward

```{r, warning=FALSE}
hc_ward <- hclust(d=mat_dist,method="ward.D")

fviz_dend(x = hc_ward, k = 2, cex = 0.6,show_labels = FALSE) +
  geom_hline(yintercept = 20, linetype = "dashed")
```

```{r}
fviz_cluster(object = list(data = datos_2, cluster = cutree(hc_ward, k = 2)),
 ellipse.type = "convex",
 repel = TRUE,
 show.clust.cent = TRUE) +
theme_bw()
```


# ACP

```{r}
datos_acp <- datos_temp1 %>%
  mutate(cluster = as.factor(km_clusters$cluster)) %>%
  mutate(orden = row_number())
grupo1 <- filter(datos_acp, datos_acp$cluster == "1")
grupo2 <- filter(datos_acp, datos_acp$cluster == "2")
```


```{r}
grupo1_acp = princomp(grupo1[,1:5], cor = TRUE) 

fviz_eig(grupo1_acp, addlabels = TRUE, ylim=c(0,100)) + ggtitle("Peso de las componentes principales")

grupo1_acp$loadings
```


```{r, warning=FALSE}
grupo1_tipi = scale(grupo1[,1:5])

descomp = svd(grupo1_tipi)

x = descomp$u%*%diag(descomp$d)
a_1 = x[,1]
a_2 = x[,2]
a_3 = x[,3]


plot_ly(grupo1, x = ~a_1, y = ~a_2, z = ~a_3, type = "scatter3d", mode = "markers+text", color=a_3,
               marker = list(size = 10, color = ~a_1), text = grupo1[,7],
               textposition = "top center") %>%
  layout(scene = list(xaxis = list(title = 'CP1'),
                      yaxis = list(title = 'CP2'),
                      zaxis = list(title = 'CP3')))
```






```{r}
grupo2_acp = princomp(grupo2[,1:5], cor = TRUE) 

fviz_eig(grupo2_acp, addlabels = TRUE, ylim=c(0,100)) + ggtitle("Peso de las componentes principales")

grupo2_acp$loadings
```



```{r, warning=FALSE}
grupo2_tipi = scale(grupo2[,1:5])

descomp = svd(grupo2_tipi)

x = descomp$u%*%diag(descomp$d)
a_1 = x[,1]
a_2 = x[,2]
a_3 = x[,3]


plot_ly(grupo2, x = ~a_1, y = ~a_2, z = ~a_3, type = "scatter3d", mode = "markers+text", color=a_3,
               marker = list(size = 10, color = ~a_2), text = grupo2[,7],
               textposition = "top center") %>%
  layout(scene = list(xaxis = list(title = 'CP1'),
                      yaxis = list(title = 'CP2'),
                      zaxis = list(title = 'CP3')))
```



